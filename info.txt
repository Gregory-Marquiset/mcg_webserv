classe PollManager pour gerer les fd aussi bien client que server
classe Server qui inclus la socket d ecoute

InitBlock -> def d un block
RecupBlockContent -> extraire les data du .conf
ReadyBlocks -> lien avec server puisque chaque block parent sera un block server

il faut que la classe Server herite de la classe ListeningSocket et de la classe ReadyBlock

une fois que j ai les ReadyBlocks
je creer l objet server avec sa listening socket

les sockets servers vont etre ajouter dans epoll()
lancement de la boucle pour surveiller les eveents

// Les classes:

// Block                Structure d'un block de config
// RecupBlockContent	Analyse le fichier et extrait les blocs
// ServerBlock	        Transforme les blocs en objets exploitables
// Server	            Représente un serveur unique basé sur un ServerBlock + Ajout d'une ListeningSocket
// ServerManager	    Gère plusieurs serveurs et stocke un std::vector<Server>

// problem avec le hostname / ip -> je comprends pas la diff
// gerer les invalides files : non exiting

// strace pour check les process

// epoll() en gros c est une structure de controle
// to poll = interroger/sonder -> donc interrogation/controle des fd (des sockets)


// un bloc c est forcement un nom + {}
// des directives c est forcement une cle et une valeur 

// read file line by line 
// -> look for {
// then look for }

// if another { alors block enfant 

// store everything that is in between
// get what is on same line that { -> should be name
// then get directives 

/* !!!! si l ordre des directives n apparait pas comme sur le .conf c est normal, j utilise une map qui range par ordre alphabetique */


// faire une fonction dans le cas ou pas de location /
// faire un tour d tous les paths, si pas de / alors:
// creer location / bloc
// index, autoindex, client_mx_size_body heritent des directives servers si non redefinis -> don a faire valoir pour tous les les locs blocks

// Initialisation (EPollManager)

//     Crée epoll.
//     Ajoute les sockets des serveurs à epoll.

// Boucle principale (run())

//     Attend des événements avec epoll_wait().
//     Si un serveur est détecté : accepter une connexion (acceptConnection()).
//     Si un client est détecté : traiter sa requête (handleClientRequest()).

// Gestion des connexions (acceptConnection())

//     Accepte le client via accept().
//     Associe la socket client au bon serveur.
//     Ajoute la socket client à epoll.


// (le accept() va dupliquer server socket
// et c est ce qui permet de laisser le socket serveur libre de toujours ecouter
// accept() cree une nouvelle socket cliente
